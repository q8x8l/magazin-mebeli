// Функция пробега по дереву и чека по потомкам автоматически в зависимости от родительской ветки
	function пробег_по_дереву_и_чека_по_потомкам ()
		{
			console.log (`Пробег`);
			return false;
			$(панель + '.чекбоксы.дерево p').each (function ()
				{
					if (парент == (зис = $(this))) 											  	return;
					if ((парент_путь = парент.attr ('путь')) == (зис_путь = зис.attr ('путь'))) return;
					if (!зис_путь.includes (парент_путь)) 										return;
					tag_v = зис.children ().eq (1);
					парент_класс = парент.children ().eq (1).attr ('class');
					if (тег == 'плюс_минус')
						{
							switch (парент_класс)
								{
									case 'v a':
										tag_v.addClass 	  ('a');
										break;
									case 'v':
										tag_v.removeClass ('a');
										break;
								}
						}
					if (тег == 'ви')
						{
							switch (парент_класс)
								{
									case 'v a':
										tag_v.removeClass ('a');
									break;
									case 'v':
										tag_v.addClass 	  ('a');
									break;
								}
						}
				}
			);
		}
// Завершил функции
// Выравнивание дерева
	function Выравнивание_дерева ()
		{
		    $((панель = '.панель_сортировки_и_фильтра ') + '.чекбоксы.дерево p').each (function () {
		    	if (!$(this).find ('i').length)
		    		{
				      if  ($(this).prepend ('<i class="v">v</i>').attr ('метка').split (', ').length == 2) $(this).prepend ('<i>+</i>');
				      else $(this).prepend ('<i class="b"></i>');
		    		}
		      $(this).css (
		        {
		          'margin-left' : (длина = ($(this).attr ('путь').split ('/').length - 2) * 20 - 20 + 'px'),
		          'width'       : 'calc(100% - ' + длина + ')',
		        }
		      );
		    });
		};
// Завершил выравнивание дерева
// Вылет потомков
	$('body').on ('click', панель + '.чекбоксы.дерево i:nth-child(1)', function ()
		{
			if ((зис = $(this)).text () == '+') зис.text ('-');
			else зис.text ('+');
		    парент = (первоначальный_клик = $(this)).parent ().toggleClass ('выпал');
		    путь   = парент.attr ('путь');
			$(панель + '.чекбоксы.дерево p').each (function ()
				{
					if (путь == (зис = $(this)).attr ('путь')) return;
					if (!зис.attr ('путь').includes (путь))    return;
					зис.toggleClass ('дисплей_нет');
				}
			);
			// Запрет на вылет
				if (парент.hasClass ('есть_ветка'))
					{
						// пробег_по_дереву_и_чека_по_потомкам ();
						return false;
					}
		    $.get (домен + 'блоки/каталог/фильтр/вылет_ветки.php',
			    {
			    	путь 		 : путь,
			    	ветка_дерева : путь.split ('/').length - 1,
			    }, (трафик) => {
				  	трафик.split ('\n').forEach (function (e)
				  		{
				  			if (e == '') return;
				  			первоначальный_клик.parent ().after (`<p метка="${e.split ('.')[0]}" путь="${e.split ('.')[1]}/"><a href="">${e.split ('.')[1].split ('/').slice (-1)}</a></p>`);
				  		}
				  	);
			    	Выравнивание_дерева ();
			    	// пробег_по_дереву_и_чека_по_потомкам ();
			    }
			  );
		    парент.addClass ('есть_ветка');
		}
	);
// Выполнил вылет потомков
// Событие чека по элементам дерева
	$('body').on ('click', панель + (дерево = '.чекбоксы.дерево') + ' p i.v', function ()
		{
			условие 	   = (исходный_клик = $(this)).parent ().attr ('путь');
			длинна_условия = условие.split ('/').length - 1;
			if (исходный_клик.parent ().hasClass ('v'))
				{
				  $(панель + дерево + ' p').each (function () {
				  	if ((зис = $(this)).attr ('путь').includes (условие)) зис.removeClass ('v');
				  })
				  for (i = длинна_условия; i > 2; i--)
					  {
					      условие_для_строчки = условие.split ('/').slice (0, i - 1).join ('/') + '/';
					      щет_категорий = 0;
					      $(панель + '.чекбоксы.дерево p').each (function ()
						      {
						        if (!(зис = $(this)).attr ('путь').includes (условие_для_строчки)) return;
				            	if (!зис.hasClass ('v')) щет_категорий ++;
						      }
					      );
					      if (щет_категорий == 1) $(панель + `.чекбоксы.дерево p[путь="${условие_для_строчки}"]`).removeClass ('v');
					  }
				}
			if (!исходный_клик.parent ().hasClass ('v'))
			  {
			    $(панель + '.чекбоксы.дерево p').each (function () {
			      if ($(this).attr ('путь').includes (условие)) $(this).addClass ('v');
			    })
			    for (i = 0; i < длинна_условия; i++)
				    {
				      $(панель + `.чекбоксы.дерево p[путь="${условие.split ('/').slice (0, i)}"]`).addClass ('v');
				      $(панель + '.чекбоксы.дерево p').each (function () {
				        зис = $(this);
				        if (зис.attr ('путь') == условие.split ('/').slice (0, i).join ('/') + '/') зис.addClass ('v');
				      })
			    	}
			
		  	}
	// запрос_фильтра (3);
		}
	);
// Конец События Чека по элементам дерева
// Чекер дерева и ленты брендов
	$('body').on ('click', панель + '.чекбоксы.дерево p i.v, ' + панель + '.чекбоксы.бренды p i', function ()
		{
			$(this).parent ().toggleClass ('v');
		}
	);
// Завершил чекер дерева и ленты брендов
	console.log (`Поправить методы пробега и чека`);
console.log (`
		дерево отправим двумерным массивом в юрл
		затем последуют бренды массивом
		и метки
		всё это обернем в массив
	`)
console.log (`- Попробовать фильтр переделать именно динамику цифровой`);
console.log (`- А, файл динамики php переделать сравнение цифрами (по порядковым номерам папок`);
console.log (`- Первоначальные вылеты трафика остануться прежними буквами`);
console.log (`- Проявление пагинации выполнить с задержкой после появления всех квадратиков мазайки витрины`);
console.log (`- Сделать так же бренды аяксом при открытии вкладки брендов`);
console.log (`- После открытии страницы каталога не буду загражуть форму фильтра статично, а подгружу её аяксом`);